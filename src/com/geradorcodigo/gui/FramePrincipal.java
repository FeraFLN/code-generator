/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FramePrincipal.java
 *
 * Created on 16/07/2015, 10:26:46
 */
package com.geradorcodigo.gui;

import com.geradorcodigo.builders.AbstractBuilder;
import com.geradorcodigo.builders.classe.generica.BuilderBeanGenerico;
import com.geradorcodigo.builders.classe.generica.BuilderBusinessGenerico;
import com.geradorcodigo.builders.classe.generica.BuilderBusinessImplGenerico;
import com.geradorcodigo.builders.classe.generica.BuilderDaoGenerico;
import com.geradorcodigo.builders.classe.generica.BuilderDaoImplGenerico;
import com.geradorcodigo.builders.classe.generica.BuilderDomainGenerico;
import com.geradorcodigo.builders.classe.generica.BuilderExcecaoBusiness;
import com.geradorcodigo.builders.classe.generica.FactoryClasseGenerica;
import com.geradorcodigo.builders.xml.mybatis.BuilderXmlMybatis;
import com.geradorcodigo.domain.banco.Coluna;
import com.geradorcodigo.domain.banco.Tabela;
import com.geradorcodigo.domain.java.ClasseJava;
import com.geradorcodigo.domain.java.ObjetoJava;
import com.geradorcodigo.exception.GeradorException;
import com.geradorcodigo.gui.classe.panel.LoadPanel;
import com.geradorcodigo.gui.classe.panel.PanelFrame;
import com.geradorcodigo.gui.classe.panel.PnlClasse;
import com.geradorcodigo.gui.classe.panel.PnlXhtml;
import com.geradorcodigo.gui.classe.panel.PnlXml;
import com.geradorcodigo.util.Util;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.xml.bind.JAXBException;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author T01BRQ0067
 */
public class FramePrincipal extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    private JTabbedPane tabPanel;
    private JPanel jPanelDefault;
    public final int HEIGHT_TAB_PANEL = 460;
    public final int WIDTH_TAB_PANEL = 790;
    public final String ENCODING = "ISO-8859-1";
    public final static Font DEFAULT_FONT = new Font("Tahoma", 0, 9);
    public final static int DEFAULT_HEIGHT_BUTTON = 23;
    public final static int DEFAULT_WIDTH_BUTTON = 81;
    public final static int DEFAULT_HEIGHT = 23;
    @SuppressWarnings("unchecked")
    private final List<Class<? extends AbstractBuilder<? extends ObjetoJava>>> clazz = new ArrayList<Class<? extends AbstractBuilder<? extends ObjetoJava>>>(Arrays.asList(BuilderBusinessGenerico.class,
            BuilderBusinessImplGenerico.class,
            BuilderDaoGenerico.class,
            BuilderDaoImplGenerico.class,
            BuilderExcecaoBusiness.class,
            BuilderBeanGenerico.class));
    private final List<String> arquivosXhtml = Arrays.asList("index.xhtml", "list.xhtml", "form.xhtml");

    /** Creates new form FramePrincipal */
    public FramePrincipal() {
        this.tabPanel = new JTabbedPane();
        initComponents();
        createPanelPardrao();
        tabPanel.setBounds(0, 0, WIDTH_TAB_PANEL, HEIGHT_TAB_PANEL);
        pnlPrincipal.add(tabPanel);
        jButton1.addActionListener(new ActionListenerLoadBar() {

            @Override
            public void actionPerformedLoad(ActionEvent evt) {
                actionGerar(evt);
            }
        });
        setSizeDefaultButtons();

    }

    private void setSizeDefaultButtons() {
        for (Component comp : getComponents()) {
            if (comp instanceof JButton) {
                comp.setSize(DEFAULT_WIDTH_BUTTON, DEFAULT_HEIGHT_BUTTON);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fchSalvarArquivos = new javax.swing.JFileChooser();
        pnlPrincipal = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        fchSalvarArquivos.setCurrentDirectory(new java.io.File("C:\\"));
            fchSalvarArquivos.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
            fchSalvarArquivos.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Morse");
            setResizable(false);
            getContentPane().setLayout(new java.awt.GridLayout(1, 0));

            pnlPrincipal.setLayout(null);

            jPanel1.setLayout(null);

            jButton1.setFont(DEFAULT_FONT);
            jButton1.setText("Gerar");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
            jPanel1.add(jButton1);
            jButton1.setBounds(0, 20, 80, 23);

            jButton2.setFont(DEFAULT_FONT);
            jButton2.setText("Salvar");
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });
            jPanel1.add(jButton2);
            jButton2.setBounds(105, 20, 80, 23);

            jButton3.setFont(DEFAULT_FONT);
            jButton3.setText("Sair");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });
            jPanel1.add(jButton3);
            jButton3.setBounds(210, 20, 81, 23);

            pnlPrincipal.add(jPanel1);
            jPanel1.setBounds(280, 470, 291, 50);

            getContentPane().add(pnlPrincipal);

            java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            setBounds((screenSize.width-804)/2, (screenSize.height-546)/2, 804, 546);
        }// </editor-fold>//GEN-END:initComponents

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    fchSalvarArquivos.showSaveDialog(this);
    boolean isCreateFile = false;
    try {
        String localFile = null;
        for (Component component : tabPanel.getComponents()) {
            if (!(component instanceof PanelFrame)) {
                continue;
            }
            isCreateFile = true;
            PanelFrame panelFrame = ((PanelFrame) component);
            localFile = Util.incluiFileSeparator(fchSalvarArquivos.getSelectedFile().getAbsolutePath());
            localFile = localFile.concat(panelFrame.getLocalArquivo());
            criarArquivo(panelFrame.getNomeArquivo(), localFile, panelFrame.getTexto());
        }

        if (isCreateFile) {
            JOptionPane.showMessageDialog(null, "Arquivos gerados com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Não foi possível encontrar Arquivos.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Erro ao criar o arquivo.", "Erro", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    this.dispose();
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed
    private void actionGerar(java.awt.event.ActionEvent evt) {
        try {
            DlgGerar dlgGerar = new DlgGerar(this, true);
            if (!dlgGerar.showThis(true)) {
                return;
            }
            LoadPanel.showLoadBar(pnlPrincipal);
            JTabbedPane tab = new JTabbedPane();
            tab.setBounds(0, 0, WIDTH_TAB_PANEL, HEIGHT_TAB_PANEL);
            LoadPanel.setTextLoadBar("Consultando tabela...");
            Tabela tabelaDominio = new Tabela(dlgGerar.getOwnerTabela(), dlgGerar.getTabela());
            BuilderDomainGenerico dominioBuilder = new BuilderDomainGenerico(tabelaDominio, dlgGerar.getNomeDesenvolvedor(), " ");
            dominioBuilder.setIdDescEntity(dlgGerar.getColunaId(),dlgGerar.getColunaDescricao());
            dominioBuilder.builder();
            ObjetoJava objetoDominio = dominioBuilder.getClasseJava();
            String nomeDominio = objetoDominio.getNome();
            LoadPanel.setTextLoadBar("Criando " + nomeDominio + ".java" + "...");
            tab.addTab(nomeDominio + ".java", new PnlClasse(objetoDominio, WIDTH_TAB_PANEL, HEIGHT_TAB_PANEL));
            creatTabs(nomeDominio, dominioBuilder.getColunas(), (ClasseJava) objetoDominio, dlgGerar, tab);
            pnlPrincipal.remove(tabPanel);
            tabPanel = tab;
            pnlPrincipal.add(tabPanel);
        } catch (JAXBException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (GeradorException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao criar o arquivo.", "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            LoadPanel.disposeLoadBar();
            repaint();
        }
    }

    private void creatTabs(String nomeDominio, List<Coluna> colunas, ClasseJava objetoDominio, DlgGerar dlgGerar, JTabbedPane tab) throws GeradorException, JAXBException {
        for (Class<? extends AbstractBuilder<? extends ObjetoJava>> c : clazz) {
            @SuppressWarnings("unchecked")
            AbstractBuilder<ObjetoJava> builderClasses = (AbstractBuilder<ObjetoJava>) FactoryClasseGenerica.getNewInstance(c, nomeDominio, dlgGerar.getNomeDesenvolvedor(), " ");
            builderClasses.builder();
            ObjetoJava o = builderClasses.getClasseJava();
            LoadPanel.setTextLoadBar("Criando " + o.getNome() + ".java" + "...");
            tab.addTab(o.getNome() + ".java", new PnlClasse(o, WIDTH_TAB_PANEL, HEIGHT_TAB_PANEL));
        }
        BuilderXmlMybatis b = new BuilderXmlMybatis(colunas, objetoDominio, " ");
        if (dlgGerar.isConsultaIdDesc()) {
            b.getResultMap().getSelectAutoComplete(dlgGerar.getColunaId(), dlgGerar.getColunaDescricao()).getSelectFindBykey(dlgGerar.getColunaId(), dlgGerar.getColunaDescricao());
        } else {
            b.getResultMap();
        }
        LoadPanel.setTextLoadBar("Criando " + nomeDominio + ".java" + "...");
        b.getSelectPaginated().getSelect().getUpdate().getDelete().getInsert();
        tab.addTab(nomeDominio + "Dao.xml", new PnlXml(b, nomeDominio + "Dao.xml"));
        for (String nomeArquivo : arquivosXhtml) {
            try {
                String texto = readFile(nomeArquivo)
                        .replace("[COD_ATIVIDADE]",dlgGerar.getCodAtividade())
                        .replace("[BEAN]", StringUtils.uncapitalize(nomeDominio) + "Bean")
                        .replace("[DOMAIN]", nomeDominio)
                        .replace("[UNDER_DOMAIN]", StringUtils.uncapitalize(nomeDominio))
                        .replace("[TITULO]", dlgGerar.getTitulo())
                        .replace("[PASTA]", dlgGerar.getPasta());
                tab.add(nomeArquivo, new PnlXhtml(texto, nomeArquivo));
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao criar o arquivo " + nomeArquivo + ".", "Erro", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private String readFile(String nameFile) throws FileNotFoundException {
        BufferedReader br =null;
        File fileDir = new File("templates" + File.separator + nameFile);
        String everything = "";
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(fileDir),ENCODING));
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append("\n");
                line = br.readLine();
            }
            everything = sb.toString();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if(br!=null){
                    br.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return everything;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fchSalvarArquivos;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlPrincipal;
    // End of variables declaration//GEN-END:variables

    private void createPanelPardrao() {
        jPanelDefault = new JPanel(new java.awt.GridLayout(1, 1));
        JTextArea jTextArea1 = new JTextArea();
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEditable(false);
        jTextArea1.setText("Programa: Gerador de Código;\nDesenvolvido: Fernando Limeira;\nVersão: 0.8;");
        jPanelDefault.add(jTextArea1);
        tabPanel.addTab("Informações", jPanelDefault);
    }
//ObjetoJava objetoJava,

    private void criarArquivo(String nomeArquivo, String localFile, String conteudoArquivo) throws IOException {
        new File(localFile).mkdirs();
        localFile = localFile.concat(nomeArquivo);
        File file = new File(localFile);
        Writer writer = null;
        try {
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(file),ENCODING));
            writer.write(conteudoArquivo);
        } finally {
            try {
                writer.close();
            } catch (Exception ex) {/*ignore*/
                JOptionPane.showMessageDialog(null, "erro", "Erro", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
